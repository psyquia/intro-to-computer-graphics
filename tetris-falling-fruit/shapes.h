#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <time.h>
#include "drawings.h"
using namespace std;

#define I 0
#define L 1
#define LM 2
#define S 3
#define SM 4
#define T 5


class coor{
  public:
    int x;
    int y;
    coor();
    coor(int nx, int ny);
};

class board {
public:
  int binaryBoard[10][22] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
  pixel pixelBoard[10][22];
  int score = 0;
  board();
  void printBi();
  void printPi();
  void draw();
  void removePixel(pixel p);
  bool matchCheck();
  void clearRow(int rowN);
  void rowCheck();
};

class shape{
public:
  bool falling = true;
  int x = 3;
  int y = 21;
  int rotSize = 2;
  int currRot = 0;
  int type;
  int pixels[4];
  coor pixelCoor[4];
  const int rotations[6][4][4][4] =
  {
    {
      {//#1
        {0,0,0,0},
        {1,2,3,4},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#2
        {0,0,4,0},
        {0,0,3,0},
        {0,0,2,0},
        {0,0,1,0}
      }
    },
    {
      {//#1
        {0,0,0,0},
        {0,2,3,4},
        {0,1,0,0},
        {0,0,0,0}
      },
      {//#2
        {0,0,4,0},
        {0,0,3,0},
        {0,0,2,1},
        {0,0,0,0}
      },
      {//#3
        {0,0,0,1},
        {0,4,3,2},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#4
        {0,1,2,0},
        {0,0,3,0},
        {0,0,4,0},
        {0,0,0,0}
      },
    },
    {
      {//#1
        {0,0,0,0},
        {0,4,3,2},
        {0,0,0,1},
        {0,0,0,0}
      },
      {//#2
        {0,0,2,1},
        {0,0,3,0},
        {0,0,4,0},
        {0,0,0,0}
      },
      {//#3
        {0,1,0,0},
        {0,2,3,4},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#4
        {0,0,4,0},
        {0,0,3,0},
        {0,1,2,0},
        {0,0,0,0}
      },
    },
    {
      {//#1
        {0,0,0,0},
        {0,0,3,4},
        {0,1,2,0},
        {0,0,0,0}
      },
      {//#2
        {0,0,4,0},
        {0,0,3,2},
        {0,0,0,1},
        {0,0,0,0}
      },
      {//#2
        {0,0,2,1},
        {0,4,3,0},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#2
        {0,1,0,0},
        {0,2,3,0},
        {0,0,4,0},
        {0,0,0,0}
      },
    },
    {
      {//#1
        {0,0,0,0},
        {0,4,3,0},
        {0,0,2,1},
        {0,0,0,0}
      },
      {//#2
        {0,0,0,1},
        {0,0,3,2},
        {0,0,4,0},
        {0,0,0,0}
      },
      {//#2
        {0,1,2,0},
        {0,0,3,4},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#2
        {0,0,1,0},
        {0,2,3,0},
        {0,1,0,0},
        {0,0,0,0}
      },
    },
    {
      {//#1
        {0,0,0,0},
        {0,1,2,4},
        {0,0,3,0},
        {0,0,0,0}
      },
      {//#1
        {0,0,4,0},
        {0,0,2,3},
        {0,0,1,0},
        {0,0,0,0}
      },
      {//#1
        {0,0,3,0},
        {0,4,2,1},
        {0,0,0,0},
        {0,0,0,0}
      },
      {//#1
        {0,0,1,0},
        {0,3,2,0},
        {0,0,4,0},
        {0,0,0,0}
      },
    }
  };
  shape(board * boar, int mType);
  void printCoor();
  void clear(board * boar);
  void updateB(board * boar);
  char collision(board * boar, char dir);
  void rotate(board * boar);
  void fall(board * boar);
  void moveLeft(board * boar);
  void moveRight(board * boar);
};
